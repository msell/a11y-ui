{"version":3,"file":"main.481cdf88a7b6c442c1cd.bundle.js","sources":["webpack:///./src/components/Checkbox/useCheckboxGroup.tsx"],"sourcesContent":["import * as React from \"react\";\n\nconst TOGGLE_SELECTED = \"TOGGLE_SELECTED\";\nconst INIT = \"INIT\";\n\nexport interface IToggleActionCreator {\n  type: string;\n  id: number;\n}\n\nexport interface IInitActionCreator {\n  type: string;\n  checkboxes: ICheckbox[];\n  exclusiveId?: number;\n}\n\nexport interface ICheckbox {\n  id: number;\n  name: string;\n  checked: boolean;\n}\n\nexport interface ICheckboxGroup {\n  checkboxes: ICheckbox[];\n  exclusiveId?: string | number;\n}\n\nexport const toggleSelected = (id: number): IToggleActionCreator => ({\n  type: TOGGLE_SELECTED,\n  id,\n});\n\nexport const initData = (checkboxes: ICheckbox[], exclusiveId?: number): IInitActionCreator => ({\n  type: INIT,\n  checkboxes,\n  exclusiveId,\n});\n\nconst reducer = (state: ICheckboxGroup, action: IToggleActionCreator & IInitActionCreator): ICheckboxGroup => {\n  const { checkboxes, exclusiveId } = state;\n  switch (action.type) {\n    case INIT:\n      return {\n        checkboxes: action.checkboxes,\n        exclusiveId: action.exclusiveId,\n      };\n\n    case TOGGLE_SELECTED:\n      const exclusiveCheckbox = checkboxes.find(x => x.id === exclusiveId);\n\n      if (action.id === exclusiveId && exclusiveCheckbox && !exclusiveCheckbox.checked) {\n        return {\n          ...state,\n          checkboxes: [\n            ...checkboxes.map(x => ({\n              ...x,\n              checked: x.id === exclusiveCheckbox.id ? true : false,\n            })),\n          ],\n        };\n      }\n\n      // If we've reached down here then it means one of the non-exclusive checkboxes is changing\n      return {\n        ...state,\n        checkboxes: checkboxes.map(x => {\n          if (x.id === exclusiveId && x.checked) {\n            // This is an exclusive checkbox and is currently checked, therefore needs to toggle\n            return { ...x, checked: false };\n          }\n\n          if (x.id === action.id) {\n            // This is the checkbox that is being toggled\n            return { ...x, checked: !x.checked };\n          }\n\n          // this checkbox is not changing state\n          return x;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\nconst defaultValue = {\n  checkboxes: [],\n};\nexport const useCheckboxGroup = (initialState: ICheckboxGroup = defaultValue): [ICheckboxGroup, any] => {\n  return React.useReducer(reducer, initialState);\n  // useReducer returns and array containing: [state, dispatch]\n};\n\nexport default useCheckboxGroup;\ntry {\n    // @ts-ignore\n    toggleSelected.displayName = \"toggleSelected\";\n    // @ts-ignore\n    toggleSelected.__docgenInfo = { \"description\": \"\", \"displayName\": \"toggleSelected\", \"props\": { \"toString\": { \"defaultValue\": null, \"description\": \"Returns a string representation of an object.\\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\", \"name\": \"toString\", \"required\": true, \"type\": { \"name\": \"(radix?: number) => string\" } }, \"toFixed\": { \"defaultValue\": null, \"description\": \"Returns a string representing a number in fixed-point notation.\\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\", \"name\": \"toFixed\", \"required\": true, \"type\": { \"name\": \"(fractionDigits?: number) => string\" } }, \"toExponential\": { \"defaultValue\": null, \"description\": \"Returns a string containing a number represented in exponential notation.\\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\", \"name\": \"toExponential\", \"required\": true, \"type\": { \"name\": \"(fractionDigits?: number) => string\" } }, \"toPrecision\": { \"defaultValue\": null, \"description\": \"Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\", \"name\": \"toPrecision\", \"required\": true, \"type\": { \"name\": \"(precision?: number) => string\" } }, \"valueOf\": { \"defaultValue\": null, \"description\": \"Returns the primitive value of the specified object.\", \"name\": \"valueOf\", \"required\": true, \"type\": { \"name\": \"() => number\" } }, \"toLocaleString\": { \"defaultValue\": null, \"description\": \"Converts a number to a string by using the current or specified locale.\\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\\n@param options An object that contains one or more properties that specify comparison options.\", \"name\": \"toLocaleString\", \"required\": true, \"type\": { \"name\": \"(locales?: string | string[], options?: NumberFormatOptions) => string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Checkbox/useCheckboxGroup.tsx#toggleSelected\"] = { docgenInfo: toggleSelected.__docgenInfo, name: \"toggleSelected\", path: \"src/components/Checkbox/useCheckboxGroup.tsx#toggleSelected\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    useCheckboxGroup.displayName = \"useCheckboxGroup\";\n    // @ts-ignore\n    useCheckboxGroup.__docgenInfo = { \"description\": \"\", \"displayName\": \"useCheckboxGroup\", \"props\": { \"checkboxes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"checkboxes\", \"required\": true, \"type\": { \"name\": \"ICheckbox[]\" } }, \"exclusiveId\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"exclusiveId\", \"required\": false, \"type\": { \"name\": \"string | number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Checkbox/useCheckboxGroup.tsx#useCheckboxGroup\"] = { docgenInfo: useCheckboxGroup.__docgenInfo, name: \"useCheckboxGroup\", path: \"src/components/Checkbox/useCheckboxGroup.tsx#useCheckboxGroup\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AA2BA","sourceRoot":""}